{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9edac2ad-ea3c-4b79-9d8e-54d0b357af04",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (0.13.2)\n",
      "Requirement already satisfied: matplotlib in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (3.10.3)\n",
      "Requirement already satisfied: plotly in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (6.1.1)\n",
      "Requirement already satisfied: scikit-learn in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (1.7.0)\n",
      "Requirement already satisfied: pandas in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (2.2.6)\n",
      "Requirement already satisfied: nltk in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (3.9.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (4.58.0)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (25.0)\n",
      "Requirement already satisfied: pillow>=8 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (11.2.1)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (3.2.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: narwhals>=1.15.1 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from plotly) (1.41.0)\n",
      "Requirement already satisfied: scipy>=1.8.0 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from scikit-learn) (1.16.0)\n",
      "Requirement already satisfied: joblib>=1.2.0 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from scikit-learn) (1.5.1)\n",
      "Requirement already satisfied: threadpoolctl>=3.1.0 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from scikit-learn) (3.6.0)\n",
      "Requirement already satisfied: pytz>=2020.1 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: tzdata>=2022.7 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from pandas) (2025.2)\n",
      "Requirement already satisfied: click in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from nltk) (8.2.1)\n",
      "Requirement already satisfied: regex>=2021.8.3 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from nltk) (2024.11.6)\n",
      "Requirement already satisfied: tqdm in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from nltk) (4.67.1)\n",
      "Requirement already satisfied: six>=1.5 in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
      "Requirement already satisfied: colorama in e:\\data analyst intern tasks\\jupyter\\venv\\lib\\site-packages (from click->nltk) (0.4.6)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install seaborn matplotlib plotly scikit-learn pandas numpy nltk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "15d9843d-bd4b-482e-ad47-ce360c6f95d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import ttk\n",
    "from tkinter import messagebox\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import plotly.express as px\n",
    "import plotly.io as pio\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import nltk\n",
    "import webbrowser\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0bfbf6f3-b909-4e00-a0b2-c5129aceab78",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     C:\\Users\\njsga\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('vader_lexicon')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1c3d90b1-e2d5-4b0a-a097-24c9c80fb04b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1. load the dataset\n",
    "\n",
    "apps_df = pd.read_csv(\"E:/Data Analyst Intern Tasks/Jupyter/Cleaned Datasets/Cleaned_GooglePlaystore.csv\")\n",
    "reviews_df = pd.read_csv(\"E:/Data Analyst Intern Tasks/Jupyter/Cleaned Datasets/Cleaned_UserReviews.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b364838b-fe41-4b02-a7bb-97d5742802c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Data Cleaning\n",
    "\n",
    "apps_df = apps_df.dropna(subset=['Rating'])\n",
    "for column in apps_df.columns:\n",
    "    apps_df[column].fillna(apps_df[column].mode()[0])\n",
    "apps_df.drop_duplicates(inplace=True)    \n",
    "apps_df = apps_df[apps_df['Rating']<=5]\n",
    "reviews_df.dropna(subset=['Translated_Review'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f85ab341-9cc1-460a-a090-014226d8c720",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge datasets on 'App' and handle non-matching apps\n",
    "merged_df = pd.merge(apps_df,reviews_df,on='App',how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f016921a-f56d-4ea6-81bc-27d8661e7211",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "Can only use .str accessor with string values!",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mAttributeError\u001b[39m                            Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[18]\u001b[39m\u001b[32m, line 5\u001b[39m\n\u001b[32m      3\u001b[39m apps_df[\u001b[33m'\u001b[39m\u001b[33mReviews\u001b[39m\u001b[33m'\u001b[39m] = apps_df[\u001b[33m'\u001b[39m\u001b[33mReviews\u001b[39m\u001b[33m'\u001b[39m].astype(\u001b[38;5;28mint\u001b[39m)\n\u001b[32m      4\u001b[39m \u001b[38;5;66;03m#apps_df['Installs']=apps_df['Installs'].str.replace(',','').str.replace('+','').astype(int)\u001b[39;00m\n\u001b[32m----> \u001b[39m\u001b[32m5\u001b[39m apps_df[\u001b[33m'\u001b[39m\u001b[33mPrice\u001b[39m\u001b[33m'\u001b[39m]=\u001b[43mapps_df\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mPrice\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m.\u001b[49m\u001b[43mstr\u001b[49m.replace(\u001b[33m'\u001b[39m\u001b[33m$\u001b[39m\u001b[33m'\u001b[39m,\u001b[33m'\u001b[39m\u001b[33m'\u001b[39m).astype(\u001b[38;5;28mfloat\u001b[39m)\n",
      "\u001b[36mFile \u001b[39m\u001b[32mE:\\Data Analyst Intern Tasks\\Jupyter\\venv\\Lib\\site-packages\\pandas\\core\\generic.py:6299\u001b[39m, in \u001b[36mNDFrame.__getattr__\u001b[39m\u001b[34m(self, name)\u001b[39m\n\u001b[32m   6292\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m (\n\u001b[32m   6293\u001b[39m     name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m._internal_names_set\n\u001b[32m   6294\u001b[39m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m._metadata\n\u001b[32m   6295\u001b[39m     \u001b[38;5;129;01mand\u001b[39;00m name \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m._accessors\n\u001b[32m   6296\u001b[39m     \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28mself\u001b[39m._info_axis._can_hold_identifiers_and_holds_name(name)\n\u001b[32m   6297\u001b[39m ):\n\u001b[32m   6298\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m[name]\n\u001b[32m-> \u001b[39m\u001b[32m6299\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mobject\u001b[39;49m\u001b[43m.\u001b[49m\u001b[34;43m__getattribute__\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mname\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32mE:\\Data Analyst Intern Tasks\\Jupyter\\venv\\Lib\\site-packages\\pandas\\core\\accessor.py:224\u001b[39m, in \u001b[36mCachedAccessor.__get__\u001b[39m\u001b[34m(self, obj, cls)\u001b[39m\n\u001b[32m    221\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m obj \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    222\u001b[39m     \u001b[38;5;66;03m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[39;00m\n\u001b[32m    223\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m._accessor\n\u001b[32m--> \u001b[39m\u001b[32m224\u001b[39m accessor_obj = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_accessor\u001b[49m\u001b[43m(\u001b[49m\u001b[43mobj\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    225\u001b[39m \u001b[38;5;66;03m# Replace the property with the accessor object. Inspired by:\u001b[39;00m\n\u001b[32m    226\u001b[39m \u001b[38;5;66;03m# https://www.pydanny.com/cached-property.html\u001b[39;00m\n\u001b[32m    227\u001b[39m \u001b[38;5;66;03m# We need to use object.__setattr__ because we overwrite __setattr__ on\u001b[39;00m\n\u001b[32m    228\u001b[39m \u001b[38;5;66;03m# NDFrame\u001b[39;00m\n\u001b[32m    229\u001b[39m \u001b[38;5;28mobject\u001b[39m.\u001b[34m__setattr__\u001b[39m(obj, \u001b[38;5;28mself\u001b[39m._name, accessor_obj)\n",
      "\u001b[36mFile \u001b[39m\u001b[32mE:\\Data Analyst Intern Tasks\\Jupyter\\venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py:191\u001b[39m, in \u001b[36mStringMethods.__init__\u001b[39m\u001b[34m(self, data)\u001b[39m\n\u001b[32m    188\u001b[39m \u001b[38;5;28;01mdef\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34m__init__\u001b[39m(\u001b[38;5;28mself\u001b[39m, data) -> \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[32m    189\u001b[39m     \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpandas\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mcore\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01marrays\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mstring_\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m StringDtype\n\u001b[32m--> \u001b[39m\u001b[32m191\u001b[39m     \u001b[38;5;28mself\u001b[39m._inferred_dtype = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_validate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    192\u001b[39m     \u001b[38;5;28mself\u001b[39m._is_categorical = \u001b[38;5;28misinstance\u001b[39m(data.dtype, CategoricalDtype)\n\u001b[32m    193\u001b[39m     \u001b[38;5;28mself\u001b[39m._is_string = \u001b[38;5;28misinstance\u001b[39m(data.dtype, StringDtype)\n",
      "\u001b[36mFile \u001b[39m\u001b[32mE:\\Data Analyst Intern Tasks\\Jupyter\\venv\\Lib\\site-packages\\pandas\\core\\strings\\accessor.py:245\u001b[39m, in \u001b[36mStringMethods._validate\u001b[39m\u001b[34m(data)\u001b[39m\n\u001b[32m    242\u001b[39m inferred_dtype = lib.infer_dtype(values, skipna=\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[32m    244\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m inferred_dtype \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m allowed_types:\n\u001b[32m--> \u001b[39m\u001b[32m245\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mAttributeError\u001b[39;00m(\u001b[33m\"\u001b[39m\u001b[33mCan only use .str accessor with string values!\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m    246\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m inferred_dtype\n",
      "\u001b[31mAttributeError\u001b[39m: Can only use .str accessor with string values!"
     ]
    }
   ],
   "source": [
    "# 3. Data Transformation\n",
    "\n",
    "apps_df['Reviews'] = apps_df['Reviews'].astype(int)\n",
    "#apps_df['Installs']=apps_df['Installs'].str.replace(',','').str.replace('+','').astype(int)\n",
    "apps_df['Price']=apps_df['Price'].str.replace('$','').astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c866d173-23c5-4002-9b70-23d207022031",
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_size(size):\n",
    "    if isinstance(size, str): \n",
    "        if 'M' in size:\n",
    "            return float(size.replace('M', ''))\n",
    "        elif 'k' in size:\n",
    "            return float(size.replace('k', '')) / 1024 \n",
    "        elif 'G' in size:\n",
    "            return float(size.replace('G', '')) * 1024 \n",
    "        else:\n",
    "            return None  \n",
    "    return size "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa74d2b5-c913-42b8-837f-46593fdf0872",
   "metadata": {},
   "outputs": [],
   "source": [
    "apps_df.loc[:, 'Size'] = apps_df['Size'].apply(convert_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0aa49f55-7d37-4ae2-bf6b-ca0de9700a1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Logarthmic\n",
    "# Add log_installs and log_reviews columns\n",
    "\n",
    "apps_df['Log_Installs'] = np.log(apps_df['Installs'])\n",
    "apps_df['Log_Reviews'] = np.log(apps_df['Reviews'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2b75378-47a4-43ce-917e-d5e3299ce9a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add rating group column\n",
    "\n",
    "def rating_group(rating):\n",
    "    if rating >=4:\n",
    "        return 'Top rated app'\n",
    "    elif rating >=3:\n",
    "        return 'Above average'\n",
    "    else:\n",
    "        return 'Below average'\n",
    "apps_df['Rating_Group']=apps_df['Rating'].apply(rating_group)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "77647aab-54c9-4dcd-97b1-dac252776c09",
   "metadata": {},
   "outputs": [],
   "source": [
    "# revenue column\n",
    "apps_df['Revenue']=apps_df['Price']*apps_df['Installs']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fe742617-ba4a-4423-bb19-1417046a788b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sentiment Analysis\n",
    "\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "reviews_df['Sentiment_Score'] = reviews_df['Translated_Review'].apply(lambda x: sia.polarity_scores(str(x))['compound'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c748c4d-1a9e-40d3-ba72-cf6e4e3236db",
   "metadata": {},
   "outputs": [],
   "source": [
    "apps_df['Last Updated']=pd.to_datetime(apps_df['Last Updated'],errors = 'coerce')\n",
    "apps_df['Year']=apps_df['Last Updated'].dt.year"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15510335-8d5a-451a-a227-8ad8d1cc4741",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Ensure the required columns exist\n",
    "if 'Log Reviews' not in apps_df.columns:\n",
    "    if 'Reviews' in apps_df.columns:\n",
    "        apps_df['Log Reviews'] = np.log1p(apps_df['Reviews'])  # log(1 + Reviews) to handle zeros\n",
    "    else:\n",
    "        raise KeyError(\"'Reviews' column is missing in the dataset.\")\n",
    "\n",
    "if 'Log Installs' not in apps_df.columns:\n",
    "    if 'Installs' in apps_df.columns:\n",
    "        apps_df['Log Installs'] = np.log1p(apps_df['Installs'])  # log(1 + Installs) to handle zeros\n",
    "    else:\n",
    "        raise KeyError(\"'Installs' column is missing in the dataset.\")\n",
    "\n",
    "if 'Price' not in apps_df.columns:\n",
    "    raise KeyError(\"'Price' column is missing in the dataset.\")\n",
    "\n",
    "if 'Rating' not in apps_df.columns:\n",
    "    raise KeyError(\"'Rating' column is missing in the dataset.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5ac1e7d-38a9-4a5f-91c1-22dd353d83b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "import tkinter.ttk as ttk \n",
    "from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "\n",
    "# Assuming apps_df is defined somewhere before this code\n",
    "# apps_df = pd.read_csv('your_data.csv')\n",
    "\n",
    "class AppDashboard(tk.Tk):\n",
    "    def __init__(self):\n",
    "        super().__init__() \n",
    "        self.title(\"Google Play Store Analysis Dashboard\")\n",
    "        self.geometry(\"1200x800\") \n",
    "        self.configure(bg=\"lightgray\") \n",
    "\n",
    "        # Create a main frame\n",
    "        main_frame = tk.Frame(self)\n",
    "        main_frame.pack(fill=tk.BOTH, expand=True)  \n",
    "\n",
    "        # Create a main canvas and scrollbars\n",
    "        canvas = tk.Canvas(main_frame, bg='lightgray')\n",
    "        v_scrollbar = ttk.Scrollbar(main_frame, orient=\"vertical\", command=canvas.yview)  \n",
    "        h_scrollbar = ttk.Scrollbar(main_frame, orient=\"horizontal\", command=canvas.xview) \n",
    "        v_scrollbar.pack(side=\"right\", fill=\"y\")\n",
    "        h_scrollbar.pack(side=\"bottom\", fill=\"x\")\n",
    "        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n",
    "\n",
    "        # Create a scrollable frame\n",
    "        scrollable_frame = ttk.Frame(canvas)  \n",
    "        scrollable_frame.bind(\n",
    "            \"<Configure>\",\n",
    "            lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\n",
    "        )\n",
    "\n",
    "        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\") \n",
    "        canvas.config(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)  \n",
    "\n",
    "        # Create and grid layout for the dashboard\n",
    "        for i in range(6):\n",
    "            scrollable_frame.columnconfigure(i, weight=1)\n",
    "\n",
    "        # Create and place frames for each visualization\n",
    "        self.create_category_analysis(scrollable_frame, 0, 0)\n",
    "        self.create_type_analysis(scrollable_frame, 0, 1)\n",
    "        self.create_rating_sentiment_analysis(scrollable_frame, 0, 2)\n",
    "        self.create_installation_update_analysis(scrollable_frame, 0, 3)\n",
    "        self.create_additional_insights(scrollable_frame, 0, 4)\n",
    "        self.create_ml_model_evaluation(scrollable_frame, 0, 5)\n",
    "\n",
    "    def create_category_analysis(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "\n",
    "        category_counts = apps_df['Category'].value_counts().nlargest(10)\n",
    "\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.barplot(x=category_counts.values, y=category_counts.index, \n",
    "                   hue=category_counts.index, palette='Spectral', ax=ax, legend=False)\n",
    "        ax.set_title('Top Categories on Play Store')\n",
    "        ax.set_xlabel('Number of Apps')\n",
    "        ax.set_ylabel('Category')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)  \n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)  \n",
    "\n",
    "    def create_type_analysis(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "        type_counts = apps_df['Type'].value_counts()\n",
    "        fig, ax = plt.subplots(figsize=(3, 2))\n",
    "        ax.pie(type_counts, labels=type_counts.index, autopct='%1.1f%%', \n",
    "              startangle=140, colors=['#ff9999', '#66b3ff'])\n",
    "        ax.set_title('Distribution of Free and Paid Apps')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\") \n",
    "\n",
    "    def create_rating_sentiment_analysis(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.histplot(apps_df['Rating'], bins=30, kde=True, color=\"purple\", ax=ax) \n",
    "        ax.set_title(\"Rating Distribution\")\n",
    "        ax.set_xlabel('Rating')\n",
    "        ax.set_ylabel('Frequency')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")  \n",
    "\n",
    "    def create_installation_update_analysis(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "\n",
    "        installs_by_category = apps_df.groupby('Category')['Installs'].sum().nlargest(10)\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.barplot(x=installs_by_category.values, y=installs_by_category.index, \n",
    "                   hue=installs_by_category.index, palette='coolwarm', ax=ax, legend=False)\n",
    "        ax.set_title('Installations by Category')\n",
    "        ax.set_xlabel('Number of Installations')\n",
    "        ax.set_ylabel('Category')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")   \n",
    "\n",
    "        updates_over_year = apps_df['Year'].value_counts().sort_index() \n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.lineplot(x=updates_over_year.index, y=updates_over_year.values, marker='o', ax=ax) \n",
    "        ax.set_title('Distribution of App Updates Over the Year')\n",
    "        ax.set_xlabel('Year')\n",
    "        ax.set_ylabel('Number of Updates') \n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")\n",
    "\n",
    "    def create_additional_insights(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "        \n",
    "        revenue_by_category = apps_df.groupby('Category')['Revenue'].sum().nlargest(10) \n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.barplot(x=revenue_by_category.values, y=revenue_by_category.index, \n",
    "                   hue=revenue_by_category.index, palette='viridis', ax=ax, legend=False)  \n",
    "        ax.set_title('Revenue by Category')\n",
    "        ax.set_xlabel('Revenue')\n",
    "        ax.set_ylabel('Category')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")  \n",
    "\n",
    "        # Genres Counts\n",
    "        genres_counts = apps_df['Genres'].str.split(';').explode().value_counts().nlargest(10)\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.barplot(x=genres_counts.values, y=genres_counts.index, \n",
    "                   hue=genres_counts.index, palette='magma', ax=ax, legend=False)\n",
    "        ax.set_title('Top Genres on Play Store')\n",
    "        ax.set_xlabel('Number of Apps')\n",
    "        ax.set_ylabel('Genres')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")\n",
    "        \n",
    "        # Effect of Last Update on Rating\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.boxplot(data=apps_df, x='Year', y='Rating', \n",
    "                   hue='Year', palette='cool', ax=ax, legend=False) \n",
    "        ax.set_title('Effect of Last Update on Rating')\n",
    "        ax.set_xlabel('Year')\n",
    "        ax.set_ylabel('Rating')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")\n",
    "        \n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        sns.boxplot(data=apps_df, x='Type', y='Rating', \n",
    "                   hue='Type', palette='Set2', ax=ax, legend=False)\n",
    "        ax.set_title('Ratings for Paid vs Free Apps')\n",
    "        ax.set_xlabel('Type')\n",
    "        ax.set_ylabel('Rating')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\")\n",
    "\n",
    "    def create_ml_model_evaluation(self, parent, row, column):\n",
    "        frame = ttk.Frame(parent, padding=\"5\")\n",
    "        frame.grid(row=row, column=column, sticky=\"nsew\", pady=5)\n",
    "        frame.columnconfigure(0, weight=1)\n",
    "\n",
    "        # Ensure the required columns exist\n",
    "        if 'Log Reviews' not in apps_df.columns:\n",
    "            apps_df['Log Reviews'] = np.log1p(apps_df['Reviews'])\n",
    "        if 'Log Installs' not in apps_df.columns:\n",
    "            apps_df['Log Installs'] = np.log1p(apps_df['Installs'])\n",
    "\n",
    "        X = apps_df[['Log Reviews', 'Log Installs', 'Price']]  \n",
    "        y = apps_df['Rating']\n",
    "        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "        model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_test)\n",
    "        mse = mean_squared_error(y_test, y_pred)\n",
    "        r2 = r2_score(y_test, y_pred)  \n",
    "\n",
    "        # ML Model Evaluation Plot\n",
    "        fig, ax = plt.subplots(figsize=(5, 3))\n",
    "        ax.scatter(y_test, y_pred, alpha=0.3) \n",
    "        ax.plot([0, 5], [0, 5], '--') \n",
    "        ax.set_title(f'ML Model Evaluation (MSE: {mse:.2f}, R2: {r2:.2f})')  \n",
    "        ax.set_xlabel('True Rating')\n",
    "        ax.set_ylabel('Predicted Rating')\n",
    "        fig.tight_layout()\n",
    "        canvas = FigureCanvasTkAgg(fig, master=frame)\n",
    "        canvas.draw()\n",
    "        canvas.get_tk_widget().pack(expand=True, fill=\"both\") \n",
    "        \n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app = AppDashboard()\n",
    "    app.mainloop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33fba5f4-9138-4cb8-a0af-c3aa96f2ce8e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3a66603-4639-46a5-9fe2-a228425d2cd6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7cb3fcc-01f6-40f7-ba12-73df03f95602",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
